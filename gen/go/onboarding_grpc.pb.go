// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: onboarding.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OnboardingServiceClient is the client API for OnboardingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnboardingServiceClient interface {
	GetOnboardingStatus(ctx context.Context, in *GetOnboardingStatusRequest, opts ...grpc.CallOption) (*GetOnboardingStatusResponse, error)
	SetOnboardingStatus(ctx context.Context, in *SetOnboardingStatusRequest, opts ...grpc.CallOption) (*SetOnboardingStatusResponse, error)
}

type onboardingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnboardingServiceClient(cc grpc.ClientConnInterface) OnboardingServiceClient {
	return &onboardingServiceClient{cc}
}

func (c *onboardingServiceClient) GetOnboardingStatus(ctx context.Context, in *GetOnboardingStatusRequest, opts ...grpc.CallOption) (*GetOnboardingStatusResponse, error) {
	out := new(GetOnboardingStatusResponse)
	err := c.cc.Invoke(ctx, "/OnboardingService/GetOnboardingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onboardingServiceClient) SetOnboardingStatus(ctx context.Context, in *SetOnboardingStatusRequest, opts ...grpc.CallOption) (*SetOnboardingStatusResponse, error) {
	out := new(SetOnboardingStatusResponse)
	err := c.cc.Invoke(ctx, "/OnboardingService/SetOnboardingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnboardingServiceServer is the server API for OnboardingService service.
// All implementations must embed UnimplementedOnboardingServiceServer
// for forward compatibility
type OnboardingServiceServer interface {
	GetOnboardingStatus(context.Context, *GetOnboardingStatusRequest) (*GetOnboardingStatusResponse, error)
	SetOnboardingStatus(context.Context, *SetOnboardingStatusRequest) (*SetOnboardingStatusResponse, error)
	mustEmbedUnimplementedOnboardingServiceServer()
}

// UnimplementedOnboardingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOnboardingServiceServer struct {
}

func (UnimplementedOnboardingServiceServer) GetOnboardingStatus(context.Context, *GetOnboardingStatusRequest) (*GetOnboardingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnboardingStatus not implemented")
}
func (UnimplementedOnboardingServiceServer) SetOnboardingStatus(context.Context, *SetOnboardingStatusRequest) (*SetOnboardingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOnboardingStatus not implemented")
}
func (UnimplementedOnboardingServiceServer) mustEmbedUnimplementedOnboardingServiceServer() {}

// UnsafeOnboardingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnboardingServiceServer will
// result in compilation errors.
type UnsafeOnboardingServiceServer interface {
	mustEmbedUnimplementedOnboardingServiceServer()
}

func RegisterOnboardingServiceServer(s grpc.ServiceRegistrar, srv OnboardingServiceServer) {
	s.RegisterService(&OnboardingService_ServiceDesc, srv)
}

func _OnboardingService_GetOnboardingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnboardingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServiceServer).GetOnboardingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OnboardingService/GetOnboardingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServiceServer).GetOnboardingStatus(ctx, req.(*GetOnboardingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnboardingService_SetOnboardingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOnboardingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServiceServer).SetOnboardingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OnboardingService/SetOnboardingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServiceServer).SetOnboardingStatus(ctx, req.(*SetOnboardingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnboardingService_ServiceDesc is the grpc.ServiceDesc for OnboardingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnboardingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OnboardingService",
	HandlerType: (*OnboardingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOnboardingStatus",
			Handler:    _OnboardingService_GetOnboardingStatus_Handler,
		},
		{
			MethodName: "SetOnboardingStatus",
			Handler:    _OnboardingService_SetOnboardingStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onboarding.proto",
}
